#! /usr/bin/env node
'use strict'

function _interopDefault(ex) {
	return (ex && (typeof ex === 'object') && 'default' in ex) ? ex.default : ex
}

const _template = _interopDefault(require('lodash/template'))
const path = require('path')
const fs = require('fs')
const trucolor = _interopDefault(require('trucolor'))
const truwrap = _interopDefault(require('truwrap'))
const commonTags = require('common-tags')
const _thebespokepixel_string = require('@thebespokepixel/string')
const meta = _interopDefault(require('@thebespokepixel/meta'))
const yargs = _interopDefault(require('yargs'))
const updateNotifier = _interopDefault(require('update-notifier'))
const verbosity = require('verbosity')
const remark = _interopDefault(require('remark'))
const gap = _interopDefault(require('remark-heading-gap'))
const squeeze = _interopDefault(require('remark-squeeze-paragraphs'))
const _defaultsDeep = _interopDefault(require('lodash/defaultsDeep'))
const _forIn = _interopDefault(require('lodash/forIn'))
const _map = _interopDefault(require('lodash/map'))
const _isObject = _interopDefault(require('lodash/isObject'))
const _flatten = _interopDefault(require('lodash/flatten'))
const pkgConf = _interopDefault(require('pkg-conf'))
const readPkg = _interopDefault(require('read-pkg-up'))
const node = _interopDefault(require('unist-builder'))
const _upperFirst = _interopDefault(require('lodash/upperFirst'))
const urlencode = _interopDefault(require('urlencode'))
const semver = require('semver')

function render$1(config) {
	const badgeNode = node('image', {
		alt: _upperFirst(config.title),
		url: `https://img.shields.io/badge/status-${config.text}-${config.color}.svg?style=${config.style}`
	})

	if (config.link) {
		return node('link', {
			title: _upperFirst(config.title),
			url: config.link
		}, [badgeNode])
	}

	return badgeNode
}

function render$2(config) {
	const badgeNode = node('image', {
		alt: _upperFirst(config.title),
		url: `https://img.shields.io/badge/${config.title}-${config.text}-${config.color}.svg?style=${config.style}`
	})

	if (config.link) {
		return node('link', {
			title: _upperFirst(config.title),
			url: config.link
		}, [badgeNode])
	}

	return badgeNode
}

function render$3(config) {
	const badgeNode = node('image', {
		alt: _upperFirst(config.title),
		url: `https://img.shields.io/badge/${config.title}-${config.text}-${config.color}.svg?style=${config.style}`
	})

	if (config.link) {
		return node('link', {
			title: _upperFirst(config.title),
			url: config.link
		}, [badgeNode])
	}

	return badgeNode
}

function cc(config, user) {
	return node('link', {
		title: _upperFirst(config.title),
		url: `https://codeclimate.com/github/${user.github.slug}`
	}, [node('image', {
		alt: _upperFirst(config.title),
		url: `https://codeclimate.com/github/${user.github.slug}/badges/gpa.svg?style=${config.style}`
	})])
}

function ccCoverage(config, user) {
	return node('link', {
		title: _upperFirst(config.title),
		url: `https://codeclimate.com/github/${user.github.slug}/coverage`
	}, [node('image', {
		alt: _upperFirst(config.title),
		url: `https://codeclimate.com/github/${user.github.slug}/badges/coverage.svg?style=${config.style}`
	})])
}

function david(config, user) {
	return node('link', {
		title: _upperFirst(config.title),
		url: `https://david-dm.org/${user.github.slug}/${config.branch}`
	}, [node('image', {
		alt: _upperFirst(config.title),
		url: `https://img.shields.io/david/${user.github.slug}.svg?branch=${config.branch}&style=${config.style}`
	})])
}

function davidDev(config, user) {
	return node('link', {
		title: _upperFirst(config.title),
		url: `https://david-dm.org/${user.github.slug}/${config.branch}#info=devDependencies`
	}, [node('image', {
		alt: _upperFirst(config.title),
		url: `https://img.shields.io/david/dev/${user.github.slug}.svg?branch=${config.branch}&style=${config.style}`
	})])
}

function render$4(config, user) {
	return node('link', {
		title: _upperFirst(config.title),
		url: `https://gitter.im/${user.github.user}/${config.room}?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge`
	}, [node('image', {
		alt: _upperFirst(config.title),
		url: `https://img.shields.io/gitter/room/${user.github.user}/${config.room}.svg?style=${config.style}`
	})])
}

function render$5(config, user) {
	return node('link', {
		title: _upperFirst(config.title),
		url: `https://inch-ci.org/github/${user.github.slug}`
	}, [node('image', {
		alt: _upperFirst(config.title),
		url: `https://inch-ci.org/github/${user.github.slug}.svg?branch=${config.branch}&style=${config.style}`
	})])
}

function renderIcon(file, type) {
	const iconSource = fs.readFileSync(path.resolve(__dirname, file))
	const iconBuffer = semver.gte(process.version, '6.0.0') ? Buffer.from(iconSource) : new Buffer(iconSource)

	return `&logo=${urlencode(`data:${type};base64,${iconBuffer.toString('base64')}`)}`
}

const renderIconSVG = id => renderIcon(`../icons/${id}.svg`, 'image/svg+xml')

function render$6(config, user) {
	return node('link', {
		title: config.title,
		url: `https://www.npmjs.com/package/${user.fullName}`
	}, [node('image', {
		alt: config.title,
		url: `https://img.shields.io/npm/v/${user.fullName}.svg?style=${config.style}${config.icon && renderIconSVG('npm')}`
	})])
}

function render$7(config) {
	return node('link', {
		title: _upperFirst(config.title),
		url: `https://github.com/rollup/rollup/wiki/jsnext:main`
	}, [node('image', {
		alt: _upperFirst(config.title),
		url: `https://img.shields.io/badge/es2015-${urlencode('jsnext:main_✔')}-64CA39.svg?style=${config.style}${config.icon && renderIconSVG('rollup')}`
	})])
}

function render$8(config, user) {
	return node('link', {
		title: _upperFirst(config.title),
		url: `https://snyk.io/test/github/${user.github.slug}`
	}, [node('image', {
		alt: _upperFirst(config.title),
		url: `https://snyk.io/test/github/${user.github.slug}/badge.svg?style=${config.style}`
	})])
}

function render$9(config, user) {
	return node('link', {
		title: _upperFirst(config.title),
		url: `https://travis-ci.org/${user.github.slug}`
	}, [node('image', {
		alt: _upperFirst(config.title),
		url: `https://img.shields.io/travis/${user.github.slug}.svg?branch=${config.branch}&style=${config.style}`
	})])
}

const services = {
	'status': render$1,
	'aux1': render$2,
	'aux2': render$3,
	'gitter': render$4,
	'code-climate': cc,
	'code-climate-coverage': ccCoverage,
	david,
	'david-dev': davidDev,
	'inch': render$5,
	'npm': render$6,
	'rollup': render$7,
	'snyk': render$8,
	'travis': render$9
}

function parseQueue(collection, providers, user) {
	if (Array.isArray(collection)) {
		const badges = _flatten(collection.map(content => [parseQueue(content, providers, user), node('text', ' ')]))
		badges.push(node('break'))
		return node('paragraph', badges)
	}
	if (_isObject(collection)) {
		return _map(collection, (content, title) => {
			return node('root', [node('heading', {
				depth: 5
			}, [node('text', title)]), parseQueue(content, providers, user)])
		})
	}
	if (!services[collection]) {
		throw new Error(`${collection} not found`)
	}
	return services[collection](providers[collection], user)
}

function render$1$1(context) {
	const asAST = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false

	return Promise.all([pkgConf('badges'), readPkg()]).then(configArray => {
		const config = configArray[0]
		const pkg = configArray[1].pkg
		if (!config.name || !config.github || !config.npm) {
			throw new Error('Badges requires at least a package name, github repo and npm user account.')
		}
		if (!config[context]) {
			throw new Error(`${context} is not provided in package.json.`)
		}
		if (!config.providers) {
			throw new Error('At least one badge provider must be specified.')
		}

		return {
			user: {
				name: config.name,
				fullName: pkg.name,
				scoped: /^@.+?\//.test(pkg.name),
				github: {
					user: config.github,
					slug: `${config.github}/${config.name}`
				},
				npm: {
					user: config.npm
				}
			},
			providers: _forIn(_defaultsDeep(config.providers, {
				'status': {
					title: 'status',
					text: 'badge',
					color: 'red',
					link: false
				},
				'aux-1': {
					title: 'aux1',
					text: 'badge',
					color: 'green',
					link: false
				},
				'aux-2': {
					title: 'aux2',
					text: 'badge',
					color: 'blue',
					link: false
				},
				'gitter': {
					title: 'gitter',
					room: 'help'
				},
				'code-climate': {
					title: 'code-climate'
				},
				'code-climate-coverage': {
					title: 'coverage'
				},
				'david': {
					title: 'david',
					branch: 'master'
				},
				'david-dev': {
					title: 'david-developer',
					branch: 'master'
				},
				'inch': {
					title: 'inch',
					branch: 'master',
					style: 'shields'
				},
				'npm': {
					title: 'npm',
					icon: true
				},
				'rollup': {
					title: 'rollup',
					icon: true
				},
				'snyk': {
					title: 'snyk'
				},
				'travis': {
					title: 'travis',
					branch: 'master'
				}
			}), value => _defaultsDeep(value, {
				style: config.style || 'flat',
				icon: false
			})),
			queue: config[context]
		}
	}).then(config => {
		return node('root', parseQueue(config.queue, config.providers, config.user))
	}).then(md => {
		if (asAST) {
			return md
		}
		return remark().use(gap).use(squeeze).stringify(md)
	})
}

const pkg = require('../package.json')

const console = verbosity.createConsole({
	outStream: process.stderr
})
const clr = trucolor.simplePalette()
const metadata = meta(__dirname)

const renderer = truwrap({
	right: 4,
	outStream: process.stderr
})

const colorReplacer = new commonTags.TemplateTag(commonTags.replaceSubstitutionTransformer(/([a-zA-Z]+?)[:/|](.+)/, (match, colorName, content) => `${clr[colorName]}${content}${clr[colorName].out}`))

const title = _thebespokepixel_string.box(colorReplacer`${'title|compile-readme'}${`dim| │ ${metadata.version(3)}`}`, {
	borderColor: 'yellow',
	margin: {
		top: 1
	},
	padding: {
		bottom: 0,
		top: 0,
		left: 2,
		right: 2
	}
})

const usage = commonTags.stripIndent(colorReplacer)`${title}

	Inject project badges into a tagged markdown-formatted source file.

	Usage:
	${'command|compile-readme'} ${'option|[options]'} ${'operator|>'} ${'argument|outputFile'}`

const epilogue = colorReplacer`${'green|© 2016'} ${'brightGreen|The Bespoke Pixel.'} ${'grey|Released under the MIT License.'}`

yargs.strict().options({
	h: {
		alias: 'help',
		describe: 'Display help.'
	},
	v: {
		alias: 'version',
		count: true,
		describe: 'Print version to stdout. -vv Print name & version.'
	},
	V: {
		alias: 'verbose',
		count: true,
		describe: 'Be verbose. -VV Be loquacious.'
	},
	c: {
		alias: 'context',
		default: 'readme',
		describe: 'The named badges context in package.json.'
	},
	u: {
		alias: 'usage',
		describe: 'Path to a markdown usage example'
	},
	color: {
		describe: 'Force color output. Disable with --no-color'
	}
}).wrap(renderer.getWidth())

const argv = yargs.argv

if (!(process.env.USER === 'root' && process.env.SUDO_USER !== process.env.USER)) {
	updateNotifier({
		pkg
	}).notify()
}

if (argv._.length === 0) {
	argv.help = true
}

if (argv.help) {
	renderer.write(usage)
	renderer.break(2)
	renderer.write(yargs.getUsageInstance().help())
	renderer.break()
	renderer.write(epilogue)
	renderer.break(1)
	process.exit(0)
}

if (argv.version) {
	process.stdout.write(metadata.version(argv.version))
	process.exit(0)
}

if (argv.verbose) {
	switch (argv.verbose) {
		case 1:
			console.verbosity(4)
			console.log(`${clr.title}Verbose mode${clr.title.out}:`)
			break
		case 2:
			console.verbosity(5)
			console.log(`${clr.title}Extra-Verbose mode${clr.title.out}:`)
			console.yargs(argv)
			break
		default:
			console.verbosity(3)
	}
}

const source = path.resolve(argv._[0])
console.debug('Source path:', source)

const template = _template(fs.readFileSync(source))

render$1$1(argv.context).then(badges => {
	const content = {
		badges,
		usage: ''
	}
	if (argv.usage) {
		content.usage = fs.readFileSync(path.resolve(argv.usage))
	}
	process.stdout.write(remark().use(gap).use(squeeze).process(template(content)).contents)
})

