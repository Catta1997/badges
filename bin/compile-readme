#! /usr/bin/env node
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _upperFirst = _interopDefault(require('lodash/upperFirst'));
var node = _interopDefault(require('unist-builder'));
var fs = require('fs');
var path = require('path');
var urlencode = _interopDefault(require('urlencode'));
var _defaultsDeep = _interopDefault(require('lodash/defaultsDeep'));
var _forIn = _interopDefault(require('lodash/forIn'));
var _map = _interopDefault(require('lodash/map'));
var _isObject = _interopDefault(require('lodash/isObject'));
var _flatten = _interopDefault(require('lodash/flatten'));
var pkgConf = _interopDefault(require('pkg-conf'));
var readPkg = _interopDefault(require('read-pkg-up'));
var remark = _interopDefault(require('remark'));
var gap = _interopDefault(require('remark-heading-gap'));
var squeeze = _interopDefault(require('remark-squeeze-paragraphs'));
var _template = _interopDefault(require('lodash/template'));
var trucolor = require('trucolor');
var truwrap = require('truwrap');
var commonTags = require('common-tags');
var string = require('@thebespokepixel/string');
var meta = _interopDefault(require('@thebespokepixel/meta'));
var yargs = _interopDefault(require('yargs'));
var updateNotifier = _interopDefault(require('update-notifier'));
var verbosity = require('verbosity');

const name = "@thebespokepixel/badges";
const version = "1.0.6";
const description = "documentation/readme badge generation and management";
const main = "index.js";
const module$1 = "index.mjs";
const bin = {
	"compile-readme": "./bin/compile-readme"
};
const directories = {
	test: "test"
};
const files = [
	"index.js",
	"index.mjs",
	"icons",
	"bin"
];
const scripts = {
	test: "xo && nyc ava",
	"doc-serve": "documentation serve --watch --theme node_modules/documentation-theme-bespoke --github --config src/docs/documentation.yml --project-name $npm_package_name  --project-version $npm_package_version src/index.js",
	"doc-build": "documentation build --format html --output docs/ --theme node_modules/documentation-theme-bespoke --github --config src/docs/documentation.yml --project-name $npm_package_name  --project-version $npm_package_version src/index.js",
	readme: "./bin/compile-readme -u src/docs/example.md src/docs/readme.md > readme.md",
	coverage: "nyc ava && nyc report --reporter=lcov --report-dir test/coverage; open test/coverage/lcov-report/index.html",
	clean: "gulp clean"
};
const repository = {
	type: "git",
	url: "git+https://github.com/MarkGriffiths/badges.git"
};
const keywords = [
	"readme",
	"badges",
	"documentation",
	"docs"
];
const author = "Mark Griffiths <mark@thebespokepixel.com> (http://thebespokepixel.com/)";
const license = "MIT";
const bugs = {
	url: "https://github.com/MarkGriffiths/badges/issues"
};
const homepage = "https://github.com/MarkGriffiths/badges#readme";
const dependencies = {
	"@thebespokepixel/meta": "^1.0.2",
	"@thebespokepixel/string": "^0.5.6",
	"common-tags": "^1.8.0",
	lodash: "^4.17.11",
	"mdast-util-inject": "^1.1.0",
	"pkg-conf": "^2.1.0",
	"read-pkg-up": "^4.0.0",
	remark: "^10.0.1",
	"remark-heading-gap": "^3.1.0",
	"remark-squeeze-paragraphs": "^3.0.3",
	"remark-usage": "^6.1.3",
	trucolor: "^1.0.2",
	truwrap: "^1.0.2",
	"unist-builder": "^1.0.3",
	"update-notifier": "^2.5.0",
	urlencode: "^1.1.0",
	verbosity: "^1.0.2",
	yargs: "^13.2.1"
};
const devDependencies = {
	"@babel/core": "^7.2.2",
	"@babel/preset-env": "^7.3.1",
	ava: "^1.2.1",
	"babel-plugin-lodash": "^3.3.4",
	"documentation-theme-bespoke": "^0.5.2",
	gulp: "^4.0.0",
	"gulp-better-rollup": "^3.4.0",
	"gulp-chmod": "^2.0.0",
	"gulp-rename": "^1.4.0",
	nyc: "^13.3.0",
	"rollup-plugin-babel": "^4.3.2",
	"rollup-plugin-commonjs": "^9.2.1",
	"rollup-plugin-json": "^3.1.0",
	"rollup-plugin-node-resolve": "^4.0.1",
	xo: "^0.24.0"
};
const xo = {
	semicolon: false,
	esnext: true,
	ignores: [
		"index.js",
		"lib/**",
		"docs/**",
		"src/docs/example.js",
		"test/coverage/**"
	]
};
const badges = {
	github: "MarkGriffiths",
	npm: "thebespokepixel",
	codeclimate: "a0a755b0fce22eb0b784",
	name: "badges",
	providers: {
		status: {
			text: "production",
			color: "green"
		},
		aux1: {
			title: "github",
			text: "source",
			color: "4E73B6",
			link: "https://github.com/MarkGriffiths/badges"
		}
	},
	"test-1": [
		"status"
	],
	readme: {
		Status: [
			[
				"npm",
				"travis",
				"david",
				"status"
			],
			[
				"snyk",
				"code-climate",
				"code-climate-coverage"
			]
		],
		Developer: [
			"greenkeeper",
			"david-dev",
			"rollup"
		],
		Help: [
			"inch",
			"gitter"
		]
	},
	docs: [
		[
			"aux1"
		],
		[
			"travis"
		],
		[
			"david"
		],
		[
			"code-climate-coverage"
		],
		[
			"inch"
		]
	]
};
const engines = {
	node: ">=8.0"
};
var pkg = {
	name: name,
	version: version,
	description: description,
	main: main,
	module: module$1,
	bin: bin,
	directories: directories,
	files: files,
	scripts: scripts,
	repository: repository,
	keywords: keywords,
	author: author,
	license: license,
	bugs: bugs,
	homepage: homepage,
	dependencies: dependencies,
	devDependencies: devDependencies,
	xo: xo,
	badges: badges,
	engines: engines
};

function render(config) {
  const badgeNode = node('image', {
    alt: _upperFirst(config.title),
    url: `https://img.shields.io/badge/status-${config.text}-${config.color}.svg?style=${config.style}`
  });

  if (config.link) {
    return node('link', {
      title: _upperFirst(config.title),
      url: config.link
    }, [badgeNode]);
  }

  return badgeNode;
}

function render$1(config) {
  const badgeNode = node('image', {
    alt: _upperFirst(config.title),
    url: `https://img.shields.io/badge/${config.title}-${config.text}-${config.color}.svg?style=${config.style}`
  });

  if (config.link) {
    return node('link', {
      title: _upperFirst(config.title),
      url: config.link
    }, [badgeNode]);
  }

  return badgeNode;
}

function render$2(config) {
  const badgeNode = node('image', {
    alt: _upperFirst(config.title),
    url: `https://img.shields.io/badge/${config.title}-${config.text}-${config.color}.svg?style=${config.style}`
  });

  if (config.link) {
    return node('link', {
      title: _upperFirst(config.title),
      url: config.link
    }, [badgeNode]);
  }

  return badgeNode;
}

function ccPath(user) {
  return user.codeclimateRepoToken ? `repos/${user.codeclimateRepoToken}` : `github/${user.github.slug}`;
}

function cc(config, user) {
  return node('link', {
    title: _upperFirst(config.title),
    url: `https://codeclimate.com/${ccPath(user)}/maintainability`
  }, [node('image', {
    alt: _upperFirst(config.title),
    url: `https://api.codeclimate.com/v1/badges/${user.codeclimateToken}/maintainability?style=${config.style}`
  })]);
}
function ccCoverage(config, user) {
  return node('link', {
    title: _upperFirst(config.title),
    url: `https://codeclimate.com/${ccPath(user)}/test_coverage`
  }, [node('image', {
    alt: _upperFirst(config.title),
    url: `https://api.codeclimate.com/v1/badges/${user.codeclimateToken}/test_coverage?style=${config.style}`
  })]);
}

function david(config, user) {
  return node('link', {
    title: _upperFirst(config.title),
    url: `https://david-dm.org/${user.github.slug}/${config.branch}`
  }, [node('image', {
    alt: _upperFirst(config.title),
    url: `https://img.shields.io/david/${user.github.slug}.svg?branch=${config.branch}&style=${config.style}`
  })]);
}
function davidDev(config, user) {
  return node('link', {
    title: _upperFirst(config.title),
    url: `https://david-dm.org/${user.github.slug}/${config.branch}#info=devDependencies`
  }, [node('image', {
    alt: _upperFirst(config.title),
    url: `https://img.shields.io/david/dev/${user.github.slug}.svg?branch=${config.branch}&style=${config.style}`
  })]);
}

function render$3(config, user) {
  return node('link', {
    title: _upperFirst(config.title),
    url: `https://gitter.im/${user.github.user}/${config.room}?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge`
  }, [node('image', {
    alt: _upperFirst(config.title),
    url: `https://img.shields.io/gitter/room/${user.github.user}/${config.room}.svg?style=${config.style}`
  })]);
}

function render$4(config, user) {
  return node('link', {
    title: _upperFirst(config.title),
    url: `https://inch-ci.org/github/${user.github.slug}`
  }, [node('image', {
    alt: _upperFirst(config.title),
    url: `https://inch-ci.org/github/${user.github.slug}.svg?branch=${config.branch}&style=${config.style}`
  })]);
}

function render$5(config, user) {
  return node('link', {
    title: config.title,
    url: `https://www.npmjs.com/package/${user.fullName}`
  }, [node('image', {
    alt: config.title,
    url: `https://img.shields.io/npm/v/${user.fullName}.svg?style=${config.style}&logo=npm`
  })]);
}

function renderIcon(file, type) {
  const iconSource = fs.readFileSync(path.resolve(__dirname, file));
  const iconBuffer = Buffer.from(iconSource);
  return `&logo=${urlencode(`data:${type};base64,${iconBuffer.toString('base64')}`)}`;
}

const renderIconSVG = id => renderIcon(`../icons/${id}.svg`, 'image/svg+xml');

function render$6(config) {
  return node('link', {
    title: _upperFirst(config.title),
    url: 'https://github.com/rollup/rollup/wiki/pkg.module'
  }, [node('image', {
    alt: _upperFirst(config.title),
    url: `https://img.shields.io/badge/es6-${urlencode('module:mjs_âœ”')}-64CA39.svg?style=${config.style}${config.icon && renderIconSVG('rollup')}`
  })]);
}

function render$7(config, user) {
  return node('link', {
    title: _upperFirst(config.title),
    url: `https://snyk.io/test/github/${user.github.slug}`
  }, [node('image', {
    alt: _upperFirst(config.title),
    url: `https://img.shields.io/snyk/vulnerabilities/github/${user.github.slug}.svg?style=${config.style}&logo=npm`
  })]);
}

function render$8(config, user) {
  return node('link', {
    title: _upperFirst(config.title),
    url: 'https://greenkeeper.io/'
  }, [node('image', {
    alt: _upperFirst(config.title),
    url: `https://badges.greenkeeper.io/${user.github.slug}.svg`
  })]);
}

function render$9(config, user) {
  return node('link', {
    title: _upperFirst(config.title),
    url: 'https://greenkeeper.io/'
  }, [node('image', {
    alt: _upperFirst(config.title),
    url: `https://badges.greenkeeper.io/${user.github.slug}.svg?token=${user.greenkeeperToken}`
  })]);
}

function render$a(config, user) {
  return node('link', {
    title: _upperFirst(config.title),
    url: `https://travis-ci.org/${user.github.slug}`
  }, [node('image', {
    alt: _upperFirst(config.title),
    url: `https://img.shields.io/travis/${user.github.slug}.svg?branch=${config.branch}&style=${config.style}&logo=travis`
  })]);
}

function render$b(config, user) {
  return node('link', {
    title: _upperFirst(config.title),
    url: `https://travis-ci.com/${user.github.slug}`
  }, [node('image', {
    alt: _upperFirst(config.title),
    url: `https://api.travis-ci.com/${user.github.slug}.svg?branch=${config.branch}&token=${user.travisToken}`
  })]);
}

const services = {
  status: render,
  aux1: render$1,
  aux2: render$2,
  gitter: render$3,
  'code-climate': cc,
  'code-climate-coverage': ccCoverage,
  david,
  'david-dev': davidDev,
  inch: render$4,
  npm: render$5,
  rollup: render$6,
  snyk: render$7,
  greenkeeper: render$8,
  'greenkeeper-pro': render$9,
  travis: render$a,
  'travis-pro': render$b
};

function parseQueue(collection, providers, user) {
  if (Array.isArray(collection)) {
    const badges = _flatten(collection.map(content => [parseQueue(content, providers, user), node('text', ' ')]));

    badges.push(node('break'));
    return node('paragraph', badges);
  }

  if (_isObject(collection)) {
    return _map(collection, (content, title) => {
      return node('root', [node('heading', {
        depth: 5
      }, [node('text', title)]), parseQueue(content, providers, user)]);
    });
  }

  if (!services[collection]) {
    throw new Error(`${collection} not found`);
  }

  return services[collection](providers[collection], user);
}

async function render$c(context, asAST = false) {
  const configArray = await Promise.all([pkgConf('badges'), readPkg()]);
  const config = configArray[0];
  const {
    pkg
  } = configArray[1];

  if (!config.name || !config.github || !config.npm) {
    throw new Error('Badges requires at least a package name, github repo and npm user account.');
  }

  if (!config[context]) {
    throw new Error(`${context} is not provided in package.json.`);
  }

  if (!config.providers) {
    throw new Error('At least one badge provider must be specified.');
  }

  const badgeQueue = {
    user: {
      name: config.name,
      fullName: pkg.name,
      scoped: /^@.+?\//.test(pkg.name),
      github: {
        user: config.github,
        slug: `${config.github}/${config.name}`
      },
      npm: config.npm,
      codeclimateToken: config.codeclimate,
      codeclimateRepoToken: config['codeclimate-repo'],
      travisToken: config.travis,
      greenkeeperToken: config.greenkeeper
    },
    providers: _forIn(_defaultsDeep(config.providers, {
      status: {
        title: 'status',
        text: 'badge',
        color: 'red',
        link: false
      },
      'aux-1': {
        title: 'aux1',
        text: 'badge',
        color: 'green',
        link: false
      },
      'aux-2': {
        title: 'aux2',
        text: 'badge',
        color: 'blue',
        link: false
      },
      gitter: {
        title: 'gitter',
        room: 'help'
      },
      'code-climate': {
        title: 'code-climate'
      },
      'code-climate-coverage': {
        title: 'coverage'
      },
      david: {
        title: 'david',
        branch: 'master'
      },
      'david-dev': {
        title: 'david-developer',
        branch: 'master'
      },
      inch: {
        title: 'inch',
        branch: 'master',
        style: 'shields'
      },
      npm: {
        title: 'npm',
        icon: true
      },
      rollup: {
        title: 'rollup',
        icon: true
      },
      snyk: {
        title: 'snyk'
      },
      greenkeeper: {
        title: 'greenkeeper'
      },
      'greenkeeper-pro': {
        title: 'greenkeeper'
      },
      travis: {
        title: 'travis',
        branch: 'master'
      },
      'travis-pro': {
        title: 'travis',
        branch: 'master'
      }
    }), value => _defaultsDeep(value, {
      style: config.style || 'flat',
      icon: false
    })),
    queue: config[context]
  };
  const ast = node('root', parseQueue(badgeQueue.queue, badgeQueue.providers, badgeQueue.user));

  if (asAST) {
    return ast;
  }

  return remark().use(gap).use(squeeze).stringify(ast);
}

const console = verbosity.createConsole({
  outStream: process.stderr
});
const clr = trucolor.simple({
  format: 'sgr'
});
const metadata = meta(__dirname);
const renderer = truwrap.truwrap({
  right: 4,
  outStream: process.stderr
});
const colorReplacer = new commonTags.TemplateTag(commonTags.replaceSubstitutionTransformer(/([a-zA-Z]+?)[:/|](.+)/, (match, colorName, content) => `${clr[colorName]}${content}${clr[colorName].out}`));
const title = string.box(colorReplacer`${'title|compile-readme'}${`dim| â”‚ ${metadata.version(3)}`}`, {
  borderColor: 'yellow',
  margin: {
    top: 1
  },
  padding: {
    bottom: 0,
    top: 0,
    left: 2,
    right: 2
  }
});
const usage = commonTags.stripIndent(colorReplacer)`
	Inject project badges into a tagged markdown-formatted source file.

	Usage:
	${'command|compile-readme'} ${'option|[options]'} ${'operator|>'} ${'argument|outputFile'}`;
const epilogue = colorReplacer`${'green|Â© 2019'} ${'brightGreen|The Bespoke Pixel.'} ${'grey|Released under the MIT License.'}`;
yargs.strict().help(false).version(false).options({
  h: {
    alias: 'help',
    describe: 'Display help.'
  },
  v: {
    alias: 'version',
    count: true,
    describe: 'Print version to stdout. -vv Print name & version.'
  },
  V: {
    alias: 'verbose',
    count: true,
    describe: 'Be verbose. -VV Be loquacious.'
  },
  c: {
    alias: 'context',
    default: 'readme',
    describe: 'The named badges context in package.json.'
  },
  u: {
    alias: 'usage',
    describe: 'Path to a markdown usage example'
  },
  color: {
    describe: 'Force color output. Disable with --no-color'
  }
}).wrap(renderer.getWidth());
const {
  argv
} = yargs;

if (!(process.env.USER === 'root' && process.env.SUDO_USER !== process.env.USER)) {
  updateNotifier({
    pkg
  }).notify();
}

if (argv._.length === 0) {
  argv.help = true;
}

if (argv.help) {
  renderer.write(title).break(2);
  renderer.write(usage);
  renderer.break(2);
  renderer.write(yargs.getUsageInstance().help());
  renderer.break();
  renderer.write(epilogue);
  renderer.break(1);
  process.exit(0);
}

if (argv.version) {
  process.stdout.write(metadata.version(argv.version));
  process.exit(0);
}

if (argv.verbose) {
  switch (argv.verbose) {
    case 1:
      console.verbosity(4);
      console.log(`${clr.title}Verbose mode${clr.title.out}:`);
      break;

    case 2:
      console.verbosity(5);
      console.log(`${clr.title}Extra-Verbose mode${clr.title.out}:`);
      console.yargs(argv);
      break;

    default:
      console.verbosity(3);
  }
}

async function render$d(template) {
  const content = {
    badges: await render$c(argv.context),
    usage: ''
  };

  if (argv.usage) {
    content.usage = fs.readFileSync(path.resolve(argv.usage));
  }

  const page = await remark().use(gap).use(squeeze).process(template(content));
  process.stdout.write(page.toString());
}

const source = path.resolve(argv._[0]);
console.debug('Source path:', source);
render$d(_template(fs.readFileSync(source)));
